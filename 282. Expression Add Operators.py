# Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.
#
# Examples:
# "123", 6 -> ["1+2+3", "1*2*3"]
# "232", 8 -> ["2*3+2", "2+3*2"]
# "105", 5 -> ["1*0+5","10-5"]
# "00", 0 -> ["0+0", "0-0", "0*0"]
# "3456237490", 9191 -> []
# Credits:
# Special thanks to @davidtan1890 for adding this problem and creating all test cases.
#
# Subscribe to see which companies asked this question.
class Solution1(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """

        def helper(num):
            start = 0
            end = len(num)
            if end == 0:
                return []
            result = [num]
            if num[0] != '0':
                for i in range(start + 1, end):
                    left = num[start:i]
                    right = num[i:]
                    rights = helper(right)
                    for ele in rights:
                        if len(ele) > 1 and ele[0] == '0' and ele[1] not in '+-*':
                            continue
                        result.append(left + '-' + ele)
                        result.append(left + '+' + ele)
                        result.append(left + '*' + ele)
            else:
                for ele in helper(num[1:]):
                    if len(ele) > 1 and ele[0] == '0' and ele[1] not in '+-*':
                        continue
                    result.append('0' + '-' + ele)
                    result.append('0' + '+' + ele)
                    result.append('0' + '*' + ele)
            return result
        tmp = helper(num)
        result = []
        for ele in tmp:
            if eval(ele) == target:
                result.append(ele)
        return result

def helper(num):
    start = 0
    end = len(num)
    if end == 1:
        return [num]
    if end == 0:
        return []
    result = []
    if num[0] != '0':
        for i in range(start+1,end):
            left = num[start:i]
            right = num[i:]
            rights = helper(right)
            for ele in rights:
                if len(ele) > 1 and ele[0] == '0' and ele[1] not in '+-*':
                    continue
                result.append(left+ '-' + ele)
                result.append(left+ '+' + ele)
                result.append(left+ '*' + ele)
    else:
        for ele in helper(num[1:]):
            if len(ele) > 1 and ele[0] == '0' and ele[1] not in '+-*':
                continue
            result.append('0' + '-' + ele)
            result.append('0' + '+' + ele)
            result.append('0' + '*' + ele)
    return result
# result = helper("")
# final = []
# # target = 2
# # for ele in result:
# #     if eval(ele) == target:
# #         final.append(ele)

a = ["1+2+3*4*5+6-7-8-9","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2+3*4+5+6*7-8-9","1+2-3+4*5+6*7-8-9","1-2+3*4*5-6-7+8-9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1-2*3+4+5+6*7+8-9","1*2+3+4-5-6+7*8-9","1-2*3+4+5-6+7*8-9","1-2-3*4+5+6+7*8-9","1*2*3*4+5+6-7+8+9","1+2*3+4*5-6+7+8+9","1+2+3+4+5+6+7+8+9","1*2*3+4+5+6+7+8+9","1-2*3+4*5+6+7+8+9","1-2*3-4+5*6+7+8+9","1+2-3*4+5*6+7+8+9","1-2*3-4-5+6*7+8+9","1+2-3*4-5+6*7+8+9","1+2+3-4*5+6*7+8+9","1*2*3-4*5+6*7+8+9","1-2*3-4-5-6+7*8+9","1+2-3*4-5-6+7*8+9","1+2+3-4*5-6+7*8+9","1*2*3-4*5-6+7*8+9","1+2+3+4-5*6+7*8+9","1*2*3+4-5*6+7*8+9","1-2*3-4-5-6-7+8*9","1+2-3*4-5-6-7+8*9","1+2+3-4*5-6-7+8*9","1*2*3-4*5-6-7+8*9","1+2+3+4-5*6-7+8*9","1*2*3+4-5*6-7+8*9","1-2*3*4-5-6+7+8*9","1+2-3-4-5*6+7+8*9","1+2+3+4+5-6*7+8*9","1*2*3+4+5-6*7+8*9","1-2*3+4*5-6*7+8*9","1-2-3*4-5-6+78-9","1-2*3*4+5-6+78-9","1-2+3-4*5-6+78-9","1-2+3+4-5*6+78-9","1*2*3*4*5-6-78+9","1-2-3+4-5+67-8-9","1*2-3*4+5+67-8-9","1*2-3-4*5+67+8-9","1-2*3+4+56+7-8-9","1*2-3-4+56-7-8+9","1*2+3*4-56+78+9","1-2+3+45+6-7+8-9","1+2-3+45-6+7+8-9","1+2-3+45+6-7-8+9","1-2-3+45-6-7+8+9","1*2+3-45+6+7+8*9","1+2+3*45-6-78-9","1+2+3-45+67+8+9","1*2*3-45+67+8+9","1*2+3+45+67-8*9","1-2*3+45-67+8*9","1*2*34-5+6-7-8-9","1+2*34-5*6+7+8-9","1*2-34+5*6+7*8-9","1*2+34-5+6+7-8+9","1*2+34+5-6-7+8+9","1+2-34+5+6+7*8+9","1+2-34+5+6-7+8*9","1-2-34-5+6+7+8*9","1-2-34+5+6+78-9","1+2-34-5-6+78+9","1-2-34+56+7+8+9","1*2+34+56-7*8+9","1*2+34-56+7*8+9","1*2*34+56-7-8*9","1*2+34-56-7+8*9","1+23+4+5+6+7+8-9","1+23*4-5-6*7+8-9","1+23-4*5+6*7+8-9","1+23-4*5-6+7*8-9","1+23+4-5*6+7*8-9","1*23+4*5-6+7-8+9","1+23-4-5+6+7+8+9","1+23*4+5-6-7*8+9","1+23-4-5-6*7+8*9","1-23-4+5+67+8-9","1-23+4-5+67-8+9","1+23*4-56+7-8+9","1+23-45+67+8-9","12*3+4+5-6+7+8-9","12*3+4+5+6-7-8+9","12+3*4+5+6-7+8+9","12-3+4*5+6-7+8+9","12-3-4+5*6-7+8+9","12*3-4-5-6+7+8+9","12*3*4-5*6-78+9","12-3*4*5+6+78+9","12-3*4-5+67-8-9","12+3-4*5+67-8-9","12-3+4+56-7-8-9","12*3-4-56+78-9","12+3-45+6+78-9","12-3-45-6+78+9","12+34-5-6-7+8+9"]
b = ["1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4+5+6+7+8+9","1*2*3+4+5-6*7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4-5*6-7+8*9","1*2*3-4*5+6*7+8+9","1*2*3-4*5-6+7*8+9","1*2*3-4*5-6-7+8*9","1*2*3-45+67+8+9","1*2*34+56-7-8*9","1*2*34-5+6-7-8-9","1*2+3*4-56+78+9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1*2+3+4-5-6+7*8-9","1*2+3+45+67-8*9","1*2+3-45+6+7+8*9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*2+34-5+6+7-8+9","1*2+34-56+7*8+9","1*2+34-56-7+8*9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-34+5*6+7*8-9","1*23+4*5-6+7-8+9","1*23-4-56-7+89","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2*3+4*5*6+7-89","1+2*3+4*5-6+7+8+9","1+2*3-4-5-6*7+89","1+2*34-5*6+7+8-9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3*45-6-78-9","1+2+3+4+5+6+7+8+9","1+2+3+4+5-6*7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4-5*6-7+8*9","1+2+3-4*5+6*7+8+9","1+2+3-4*5-6+7*8+9","1+2+3-4*5-6-7+8*9","1+2+3-45+67+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3*4-5+6*7+8+9","1+2-3*4-5-6+7*8+9","1+2-3*4-5-6-7+8*9","1+2-3+4*5+6*7-8-9","1+2-3+45+6-7-8+9","1+2-3+45-6+7+8-9","1+2-3-4-5*6+7+8*9","1+2-3-45-6+7+89","1+2-34+5+6+7*8+9","1+2-34+5+6-7+8*9","1+2-34-5-6+78+9","1+23*4+5-6-7*8+9","1+23*4-5-6*7+8-9","1+23*4-56+7-8+9","1+23+4+5+6+7+8-9","1+23+4-5*6+7*8-9","1+23+4-5-67+89","1+23-4*5+6*7+8-9","1+23-4*5-6+7*8-9","1+23-4-5+6+7+8+9","1+23-4-5-6*7+8*9","1+23-45+67+8-9","1-2*3*4+5-6+78-9","1-2*3*4-5-6+7+8*9","1-2*3+4*5+6+7+8+9","1-2*3+4*5-6*7+8*9","1-2*3+4+5+6*7+8-9","1-2*3+4+5-6+7*8-9","1-2*3+4+56+7-8-9","1-2*3+45-67+8*9","1-2*3-4+5*6+7+8+9","1-2*3-4-5+6*7+8+9","1-2*3-4-5-6+7*8+9","1-2*3-4-5-6-7+8*9","1-2*34+5*6-7+89","1-2+3*4*5-6-7+8-9","1-2+3+4-5*6+78-9","1-2+3+45+6-7+8-9","1-2+3-4*5-6+78-9","1-2+3-45+6-7+89","1-2-3*4+5+6+7*8-9","1-2-3*4-5-6+78-9","1-2-3+4-5+67-8-9","1-2-3+45-6-7+8+9","1-2-34+5+6+78-9","1-2-34+56+7+8+9","1-2-34-5+6+7+8*9","1-23*4+5+6*7+89","1-23+4*5-6*7+89","1-23+4-5+67-8+9","1-23+45-67+89","1-23-4+5+67+8-9","1-23-4-5-6-7+89","12*3*4-5*6-78+9","12*3+4+5+6-7-8+9","12*3+4+5-6+7+8-9","12*3-4-5-6+7+8+9","12*3-4-56+78-9","12+3*4+5+6-7+8+9","12+3*45-6-7-89","12+3+4-56-7+89","12+3-4*5+67-8-9","12+3-45+6+78-9","12+34-5-6-7+8+9","12-3*4*5+6+78+9","12-3*4-5+67-8-9","12-3+4*5+6-7+8+9","12-3+4+56-7-8-9","12-3-4+5*6-7+8+9","12-3-4-56+7+89","12-3-45-6+78+9"]

a = set(a)
b = set(b)
print(len(a),len(b))
print(len(b.intersection(a)))
print(b - a)
class Solution(object):
    def addOperators(self, num, target):
        def helper(rst, path, num, target, pos, eval, multed):
            if pos == len(num):
                if target == eval:
                    rst.append(path)
            for i in range(pos,len(num)):
                if i != pos and num[pos] == '0':
                    break
                cur = int(num[pos:i+1])
                if pos == 0:
                    helper(rst,path + str(cur),num,target,i+1,cur,cur)
                else:
                    helper(rst, path + "+" + str(cur), num, target, i + 1, eval + cur, cur)
                    helper(rst, path + "-" + str(cur), num, target, i + 1, eval - cur, -cur)
                    helper(rst, path + "*" + str(cur), num, target, i + 1, eval - multed + multed * cur, multed * cur)
        rst = []
        if not num:
            return []
        helper(rst, "", num, target, 0, 0, 0)
        return rst

# print(result)
hh = Solution()
heihei = hh.addOperators("123",6)
print(heihei)

